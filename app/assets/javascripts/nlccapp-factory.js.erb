/* global angular, $ */
var factoryModule= angular.module('nlcc.factory', []);

factoryModule.factory('tools', ['$sce', function($sce){
  return { 
    trustUrl: function(url){
      return $sce.trustAsResourceUrl(url);
    }
  }
}])

factoryModule.factory('settings', ['$rootScope', function($rootScope) {
  // supported languages
  var settings = {
    layout: {
      pageSidebarClosed: false, // sidebar menu state
      pageContentWhite: true, // set page content layout
      pageBodySolid: false, // solid body color state
      pageAutoScrollOnLoad: 1000 // auto scroll to top on page load
    },
    assetsPath: '../assets',
    globalPath: '../assets/global',
    layoutPath: '../assets/layouts/layout2',
  };

  $rootScope.settings = settings;

  return settings;
}]).factory('mvideoFactory', ['$http','$q', function($http, $q){
  var service = {};
  var _baseUrl = '/mvideos';
  
  service.getAllMvideos = function(){
    var deferred = $q.defer();
    var _url = _baseUrl + '.json';
    $http({
      method: 'GET',
      url: _url,
    }).success(function(data){
      deferred.resolve(data);
    }).error(function(){
      deferred.reject("There is an error");
    });
    return deferred.promise;
  }
  
  service.getMvideo = function(id){
    var deferred = $q.defer();
    var _url = _baseUrl + '/' + id + '.json';
    $http({
      method: 'GET',
      url: _url,
    }).success(function(data){
      deferred.resolve(data);
    }).error(function(){
      deferred.reject("There is an error");
    });
    return deferred.promise;
  }
  
  service.createMVideo = function(newvideo) {
    var deferred = $q.defer();
    var _url = _baseUrl + '.json';
    $http({
      method: 'POST',
      url: _url,
      headers: {
        'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
      },
      data: {
        "utf8": "✓",
        "mvideo": {
          "title": newvideo.title,
          "path": newvideo.path,
          "date": newvideo.date,
          "desc": newvideo.desc,
          "youtubeID": newvideo.youtubeID,
          "location_id": newvideo.locat.id
        }
      }
    }).success(function(data){
      deferred.resolve(data);
    }).error(function(){
      deferred.reject("There is an error");
    });
    return deferred.promise;
  }
  
  service.updateMVideo = function(updated_mvideo){
    var _url = _baseUrl + '/' + updated_mvideo.id + '.json'
    var deferred = $q.defer();
    
    $http({
      method: 'PUT',
      url: _url,
      headers: {
        'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
      }, 
      data: {
        "utf8": "✓",
        "mvideo": {
          "title": updated_mvideo.title,
          "path": updated_mvideo.path,
          "date": updated_mvideo.date,
          "desc": updated_mvideo.desc,
          "youtubeID": updated_mvideo.youtubeID,
          "location_id": updated_mvideo.locat.id
        }
      }
    }).success(function(data){
      deferred.resolve(data);
    }).error(function(){
      deferred.reject("There is an error");
    });
    return deferred.promise;
  }
  
  service.deleteMVideo = function(id) {
    var _url = _baseUrl + '/' + id + '.json'
    var deferred = $q.defer();
    $http({
      method: 'DELETE',
      url: _url,
      headers: {
        'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
      }  
    }).success(function(data){
      deferred.resolve(data);
    }).error(function(){
      deferred.reject("There is an error");
    });
    return deferred.promise;
  }
  
  return service;
}]).factory('categoryFactory', ['$http','$q', function($http, $q){
  var service = {};
  var _baseUrl = '/categories';
  
  service.getAllCategories = function(){
    var deferred = $q.defer();
    var _url = _baseUrl + '.json';
    $http({
      method: 'GET',
      url: _url,
    }).success(function(data){
      deferred.resolve(data);
    }).error(function(){
      deferred.reject("There is an error");
    });
    return deferred.promise;
  }
  
  service.getAllLocations = function(){
    var deferred = $q.defer();
    var _url = '/locations.json';
    $http({
      method: 'GET',
      url: _url,
    }).success(function(data){
      deferred.resolve(data);
    }).error(function(){
      deferred.reject("There is an error");
    });
    return deferred.promise;
  }
  return service;
}]).factory('eventFactory', ['$http','$q', function($http, $q){
  var service = {};
  var _baseUrl = '/events';
  
  service.getAllEvents = function(){
    var deferred = $q.defer();
    var _url = _baseUrl + '.json';
    $http({
      method: 'GET',
      url: _url,
    }).success(function(data){
      deferred.resolve(data);
    }).error(function(){
      deferred.reject("There is an error");
    });
    return deferred.promise;
  }
  
  service.getEvent = function(id){
    var deferred = $q.defer();
    var _url = _baseUrl + '/' + id + '.json';
    $http({
      method: 'GET',
      url: _url,
    }).success(function(data){
      deferred.resolve(data);
    }).error(function(){
      deferred.reject("There is an error");
    });
    return deferred.promise;
  }
  
  service.createEvent = function(newevent) {
    var deferred = $q.defer();
    var _url = _baseUrl + '.json';
    //console.log(newevent);
    console.log("Create event");
    var dt = new moment(newevent.datetime, 'MM/DD/YYYY h:mm a');
    var vu = new moment(newevent.repeat.valid_until, 'MM/DD/YYYY');
    //console.log(newevent.categories);
    newevent.cat = [];
    newevent.categories.forEach(function(item, index){
      newevent.cat.push(item.toString());
    })
    
    console.log(newevent.cat);
    
    
    $http({
      method: 'POST',
      url: _url,
      headers: {
        'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
      },
      data: {
        "utf8": "✓",
        "event": {
          "title": newevent.title,
          "short_desc": newevent.short_desc,
          "desc": escape(newevent.desc),
          "datetime(1i)": dt.year(),
          "datetime(2i)": dt.month()+1,
          "datetime(3i)": dt.date(),
          "datetime(4i)": dt.hour(),
          "datetime(5i)": dt.minute(),
          "event_period": newevent.period.min,
          "category_ids": newevent.categories,
          "location": newevent.location,
          "featured": newevent.featured
        },
        "repeat": newevent.repeat.isSelected,
        "valid_until": {
          "date(1i)": vu.year(),
          "date(2i)": vu.month()+1,
          "date(3i)": vu.date()
        }
      }
    }).success(function(data){
      deferred.resolve(data);
    }).error(function(){
      deferred.reject("There is an error");
    });
    return deferred.promise;
  }
  
  service.deleteEvent = function(id) {
    var _url = _baseUrl + '/' + id + '.json'
    var deferred = $q.defer();
    $http({
      method: 'DELETE',
      url: _url,
      headers: {
        'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
      }  
    }).success(function(data){
      deferred.resolve(data);
    }).error(function(){
      deferred.reject("There is an error");
    });
    return deferred.promise;
  }
  
  service.updateEvent = function(updated_event) {
    var _url = _baseUrl + '/' + updated_event.id + '.json'
    var deferred = $q.defer();
    
    var dt = new moment(updated_event.datetime, 'MM/DD/YYYY h:mm a');
    var vu = new moment(updated_event.repeat.valid_until, 'MM/DD/YYYY');
    console.log(updated_event.categories);
    updated_event.cat = [];
    updated_event.categories.forEach(function(item, index){
      updated_event.cat.push(item.toString());
    })
    
    console.log(updated_event.cat);
    $http({
      method: 'PUT',
      url: _url,
      headers: {
        'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
      }, 
      data: {
        "utf8": "✓",
        "event": {
          "id": updated_event.id,
          "title": updated_event.title,
          "short_desc": updated_event.short_desc,
          "desc": escape(updated_event.desc),
          "datetime(1i)": dt.year(),
          "datetime(2i)": dt.month()+1,
          "datetime(3i)": dt.date(),
          "datetime(4i)": dt.hour(),
          "datetime(5i)": dt.minute(),
          "event_period": updated_event.period.min,
          "category_ids": updated_event.categories,
          "location": updated_event.location,
          "featured": updated_event.featured
        },
        "repeat": updated_event.repeat.isSelected,
        "valid_until": {
          "date(1i)": vu.year(),
          "date(2i)": vu.month()+1,
          "date(3i)": vu.date()
        }
      }
    }).success(function(data){
      deferred.resolve(data);
    }).error(function(){
      deferred.reject("There is an error");
    });
    return deferred.promise;
  }
  return service;
}]).factory('libraryFactory', ['$http','$q', function($http, $q){
  var service = {};
  var _baseUrl = '/libraries';
  service.getAllLibraries = function(page){
    var deferred = $q.defer();
    var _url = _baseUrl + '.json?page='+page;
    $http({
      method: 'GET',
      url: _url,
    }).success(function(data){
      deferred.resolve(data);
    }).error(function(){
      deferred.reject("There is an error");
    });
    return deferred.promise;
  }
  service.deleteLibrary = function(id) {
    var _url = _baseUrl + '/' + id + '.json'
    var deferred = $q.defer();
    $http({
      method: 'DELETE',
      url: _url,
      headers: {
        'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
      }  
    }).success(function(data){
      deferred.resolve(data);
    }).error(function(){
      deferred.reject("There is an error");
    });
    return deferred.promise;
  }
  return service;
}]).factory('maudioFactory', ['$http','$q', function($http, $q){
  var service = {};
  var _baseUrl = '/maudios';
  
  service.getAllMaudios = function(){
    var deferred = $q.defer();
    var _url = _baseUrl + '.json';
    $http({
      method: 'GET',
      url: _url,
    }).success(function(data){
      deferred.resolve(data);
    }).error(function(){
      deferred.reject("There is an error");
    });
    return deferred.promise;
  }
  
  service.createMaudio = function(newaudio) {
    var deferred = $q.defer();
    var _url = _baseUrl + '.json';
    console.log(newaudio);
    $http({
      method: 'POST',
      url: _url,
      headers: {
        'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
      },
      data: {
        "utf8": "✓",
        "maudio": {
          "title": newaudio.title,
          "path": newaudio.path,
          "date": newaudio.date,
          "desc":newaudio.desc,
          "featured": newaudio.featured.isSelected,
          "speaker":newaudio.speaker
        }
      }
    }).success(function(data){
      deferred.resolve(data);
    }).error(function(){
      deferred.reject("There is an error");
    });
    return deferred.promise;
  }
  
  service.getMaudio = function(id){
    var deferred = $q.defer();
    var _url = _baseUrl + '/' + id + '.json';
    $http({
      method: 'GET',
      url: _url,
    }).success(function(data){
      deferred.resolve(data);
    }).error(function(){
      deferred.reject("There is an error");
    });
    return deferred.promise;
  }
  
  service.updateMaudio = function(updated_maudio){
    var _url = _baseUrl + '/' + updated_maudio.id + '.json'
    var deferred = $q.defer();
    
    $http({
      method: 'PUT',
      url: _url,
      headers: {
        'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
      }, 
      data: {
        "utf8": "✓",
        "maudio": {
          "title": updated_maudio.title,
          "path": updated_maudio.path,
          "date": updated_maudio.date,
          "desc":updated_maudio.desc,
          "featured": updated_maudio.featured.isSelected,
          "speaker":updated_maudio.speaker
        }
      }
    }).success(function(data){
      deferred.resolve(data);
    }).error(function(){
      deferred.reject("There is an error");
    });
    return deferred.promise;
  }
  
  service.deleteMaudio = function(id) {
    var _url = _baseUrl + '/' + id + '.json'
    var deferred = $q.defer();
    $http({
      method: 'DELETE',
      url: _url,
      headers: {
        'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
      }  
    }).success(function(data){
      deferred.resolve(data);
    }).error(function(){
      deferred.reject("There is an error");
    });
    return deferred.promise;
  }
  return service;
}]).factory('mgmtFactory', ['$http','$q', function($http, $q){
  var service = {};
  var _baseUrl = '/mgmts';
  
  service.getUnapprovedUsers = function(){
    var deferred = $q.defer();
    var _url = _baseUrl + '/unapprovedusers.json';
    $http({
      method: 'GET',
      url: _url,
    }).success(function(data){
      deferred.resolve(data);
    }).error(function(){
      deferred.reject("There is an error");
    });
    return deferred.promise;
  };
  
  service.getUser = function(id){
    console.log("Get User");
    var deferred = $q.defer();
    var _url = _baseUrl + '/users/' + id + '.json';
    $http({
      method: 'GET',
      url: _url,
    }).success(function(data){
      deferred.resolve(data);
    }).error(function(){
      deferred.reject("There is an error");
    });
    return deferred.promise;
  };
  return service;
}]).factory('logFactory', ['$http','$q', function($http, $q){
  var service = {};
  var _baseUrl = '/logs';
  
  service.getAllLogs = function(page){
    var deferred = $q.defer();
    var _url = _baseUrl + '.json?page=' + page;
    $http({
      method: 'GET',
      url: _url,
    }).success(function(data){
      deferred.resolve(data);
    }).error(function(){
      deferred.reject("There is an error");
    });
    return deferred.promise;
  }
  return service
}]);