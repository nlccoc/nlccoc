/* global angular, $ */
var factoryModule= angular.module('nlcc.factory', []);

factoryModule.factory('tools', ['$sce', function($sce){
  return { 
    trustUrl: function(url){
      return $sce.trustAsResourceUrl(url);
    }
  }
}])

factoryModule.factory('settings', ['$rootScope', function($rootScope) {
  // supported languages
  var settings = {
    layout: {
      pageSidebarClosed: false, // sidebar menu state
      pageContentWhite: true, // set page content layout
      pageBodySolid: false, // solid body color state
      pageAutoScrollOnLoad: 1000 // auto scroll to top on page load
    },
    assetsPath: '../assets',
    globalPath: '../assets/global',
    layoutPath: '../assets/layouts/layout2',
  };

  $rootScope.settings = settings;

  return settings;
}]).factory('mvideoFactory', ['$http','$q', function($http, $q){
  var service = {};
  var _baseUrl = '/mvideos';
  
  service.getAllMvideos = function(){
    var deferred = $q.defer();
    var _url = _baseUrl + '.json';
    $http({
      method: 'GET',
      url: _url,
    }).success(function(data){
      deferred.resolve(data);
    }).error(function(){
      deferred.error("There is an error");
    });
    return deferred.promise;
  }
  
  service.createMVideo = function(newvideo) {
    var deferred = $q.defer();
    var _url = _baseUrl + '.json';
    $http({
      method: 'POST',
      url: _url,
      params: {
        "utf8": "âœ“",
        "authenticity_token": $('meta[name="csrf-token"]').attr('content'),
        "mvideo[title]": newvideo.title,
        "mvideo[path]": newvideo.path,
        "mvideo[date]": newvideo.date
      }
    }).success(function(data){
      deferred.resolve(data);
    }).error(function(){
      deferred.error("There is an error");
    });
    return deferred.promise;
  }
  
  service.deleteMVideo = function(id) {
    var _url = _baseUrl + '/' + id + '.json'
    var deferred = $q.defer();
    $http({
      method: 'DELETE',
      url: _url,
      headers: {
        'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
      }  
    }).success(function(data){
      deferred.resolve(data);
    }).error(function(){
      deferred.error("There is an error");
    });
    return deferred.promise;
  }
  
  return service;
}]);;