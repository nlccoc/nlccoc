/* global nlccmgmtapp */
nlccmgmtapp.config([
 '$stateProvider', 
 '$urlRouterProvider', 
 '$locationProvider', 
 '$sceDelegateProvider', 
 '$httpProvider', function($stateProvider, $urlRouterProvider, $locationProvider, $sceDelegateProvider, $httpProvider){
    $sceDelegateProvider.resourceUrlWhitelist([
      // Allow same origin resource loads.
      'self',
      // Allow loading from our assets domain. **.
      'https://files.natecheng.me/**'
    ]);
    
    $httpProvider.defaults.useXDomain = true;
    $httpProvider.interceptors.push('responseObserver');
    
    delete $httpProvider.defaults.headers.common['X-Requested-With'];
    $stateProvider.state('dashboard', {
      url: '/mgmts/dashboard',templateUrl: 'mgmts/home.html'/*,
      controller: 'mainCtrl'*/
    }).state('list-scriptures', {
      url: '/mgmts/blog/list-scriptures', templateUrl: 'mgmts/blog/posts.html',
      controller: 'listScriptCtrl'
    }).state('add-scripture', {
      url: '/mgmts/blog/add-scripture', templateUrl: 'mgmts/blog/new_post.html',
      controller: 'addScriptCtrl'
    }).state('categories', {
      url: '/mgmts/blog/categories', templateUrl: 'mgmts/blog/categories.html'/*,
      controller: 'blogCategoriesCtrl'*/
    }).state('tags', {
      url: '/mgmts/blog/tags',templateUrl: 'mgmts/blog/tags.html',
      controller: 'blogTagsCtrl'
    }).state('media-video', {
      url: '/mgmts/media-video/:page',templateUrl: 'mgmts/media/video.html',
      controller: 'mediaVideoCtrl',
      resolve: {
        catResource: 'categoryFactory',
        mvideoResource: 'mvideoFactory',
        locations: ['catResource',function(catResource){
          return catResource.getAllLocations();
        }],
        mvideo: ['mvideoResource', '$stateParams', function(mvideoResource, $stateParams){
          var page = 1;
          if($stateParams.page != '')
            page = $stateParams.page
          return mvideoResource.getAllMvideos(page);
        }]
      }
    }).state('media-audio', {
      url: '/mgmts/media-audio/:page',templateUrl: 'mgmts/media/audio.html',
      resolve: {
        // A string value resolves to a service
        maudioResource: 'maudioFactory',
        // A function value resolves to the return
        // value of the function
        maudios: ['maudioResource', '$stateParams',function(maudioResource, $stateParams){
          var page = 1;
          if($stateParams.page != '')
            page = $stateParams.page
          return maudioResource.getAllMaudios(page);
        }]
      },
      controller: 'mediaAudioCtrl'
    }).state('media-photo', {
      url: '/mgmts/media-photo',templateUrl: 'mgmts/media/photo.html'/*,
      controller: 'mainCtrl'*/
    }).state('media-library', {
      url: '/mgmts/media-library/:page',templateUrl: 'mgmts/media/library.html',
      resolve: {
        libraryResource: 'libraryFactory',
        libraries: ['libraryResource', '$stateParams', function(libraryResource, $stateParams){
          var page = 1;
          if($stateParams.page != '')
            page = $stateParams.page
          return libraryResource.getAllLibraries(page);
        }]
      },
      controller: 'libraryCtrl'
    }).state('library-upload', {
      url: '/mgmts/library-upload',templateUrl: 'mgmts/media/library.upload.html'/*,
      controller: 'mainCtrl'*/
    }).state('events-all', {
      url: '/mgmts/events-all',templateUrl: 'mgmts/events/all.html',
      controller: 'eventAllCtrl'
    }).state('event-detail', {
      url: '/mgmts/event/:eventID',templateUrl: 'mgmts/events/event.html',
      resolve: {
        // A string value resolves to a service
        eventResource: 'eventFactory',

        // A function value resolves to the return
        // value of the function
        event: ['eventResource', '$stateParams',function(eventResource, $stateParams){
          return eventResource.getEvent($stateParams.eventID);
        }]
      },
      controller: 'eventCtrl'
    }).state('event-edit', {
      url: '/mgmts/events/:eventID/edit',templateUrl: 'mgmts/events/event.edit.html',
      resolve: {
        // A string value resolves to a service
        eventResource: 'eventFactory',
        catResource: 'categoryFactory',
        // A function value resolves to the return
        // value of the function
        event: ['eventResource', '$stateParams',function(eventResource, $stateParams){
          return eventResource.getEvent($stateParams.eventID);
        }],
        categories: ['catResource',function(catResource){
          return catResource.getAllCategories();
        }]
      },
      controller: 'eventEditCtrl'
    }).state('event-new', {
      url: '/mgmts/events/new',templateUrl: 'mgmts/events/event.edit.html',
      controller: 'eventNewCtrl',
      resolve: {
        catResource: 'categoryFactory',
        categories: ['catResource',function(catResource){
          return catResource.getAllCategories();
        }],
        locations: ['catResource',function(catResource){
          return catResource.getAllLocations();
        }]
      }
    }).state('events-category', {
      url: '/mgmts/events-category',
      templateUrl: 'mgmts/events/category.html'/*,
      controller: 'eventCtrl'*/
    }).state('audio-new', {
      url: '/mgmts/audio-new',
      templateUrl: 'mgmts/media/audio.edit.html',
      controller: 'audioNewCtrl'
    }).state('maudio-edit', {
      url: '/mgmts/maudios/:maudioID/edit',
      templateUrl: 'mgmts/media/audio.edit.html',
      resolve: {
        // A string value resolves to a service
        maudioResource: 'maudioFactory',
        // A function value resolves to the return
        // value of the function
        maudio: ['maudioResource', '$stateParams',function(maudioResource, $stateParams){
          return maudioResource.getMaudio($stateParams.maudioID);
        }]
      },
      controller: 'mediaAudioEditCtrl'
    }).state('mvideo-new', {
      url: '/mgmts/mvideo-new',
      templateUrl: 'mgmts/media/video.edit.html',
      controller: 'mvideoNewCtrl',
      resolve: {
        catResource: 'categoryFactory',
        locations: ['catResource',function(catResource){
          return catResource.getAllLocations();
        }]
      }
    }).state('mvideo-edit', {
      url: '/mgmts/mvideos/:mvideoID/edit',
      controller: 'mediaVideoEditCtrl', 
      templateUrl: 'mgmts/media/video.edit.html',
      resolve: {
        catResource: 'categoryFactory',
        locations: ['catResource',function(catResource){
          return catResource.getAllLocations();
        }],
        mvideoResource: 'mvideoFactory',
        mvideo: ['mvideoResource', '$stateParams',function(mvideoResource, $stateParams){
          return mvideoResource.getMvideo($stateParams.mvideoID);
        }]
      }
    }).state('unapproved', {
      url: '/mgmts/unapproved_users',
      controller: 'unapprovedUsersCtrl', 
      templateUrl: 'mgmts/users/unapproved.html',
      resolve: {
        mgmtResource: 'mgmtFactory',
        unapprovedusers: ['mgmtResource',function(mgmtResource){
          return mgmtResource.getUnapprovedUsers();
        }]
      }
    }).state('approved', {
      url: '/mgmts/approved_users',
      controller: 'approvedUsersCtrl', 
      templateUrl: 'mgmts/users/approved.html',
      resolve: {
        mgmtResource: 'mgmtFactory',
        approvedusers: ['mgmtResource',function(mgmtResource){
          return mgmtResource.getApprovedUsers();
        }]
      }
    }).state('user', {
      url: '/mgmts/user/:id',
      controller: 'userMgmtCtrl', 
      templateUrl: 'mgmts/users/user.html',
      resolve: {
      mgmtResource: 'mgmtFactory',
        user: ['mgmtResource', '$stateParams',function(mgmtResource, $stateParams){
          return mgmtResource.getUser($stateParams.id);
        }]
      }
    }).state('user-profile', {
      url: '/mgmts/user-profile',templateUrl: 'mgmts/profile.html'/*,
      controller: 'mainCtrl'*/
    }).state('logs-all', {
      url: '/mgmts/logs-all/:page',
      controller: 'logsCtrl', 
      templateUrl: 'mgmts/logs/all.html',
      resolve: {
        logResource: 'logFactory',
        logs: ['logResource', '$stateParams',function(logResource, $stateParams){
          var page = 1;
          if($stateParams.page != '')
            page = $stateParams.page
          return logResource.getAllLogs(page);
        }]
      }
    });
    
    $urlRouterProvider.otherwise('/mgmts/dashboard');
    $locationProvider.html5Mode({
       enabled:true,
       requireBase: false
    });
}]);