/* global nlccmgmtapp, gon, Layout, $, I18n, QuickSidebar */

nlccmgmtapp.controller('mgmtCtrl', ['$scope', '$rootScope', 'settings', function($scope, $rootScope, settings){
  console.log('Mgmt Controller');
  $rootScope.I18n = I18n
  I18n.defaultLocale = "zh";
  I18n.locale = "zh";
//  I18n.currentLocale();
  //console.log(gon.current_mgmt);
  $scope.current_mgmt = gon.current_mgmt;
  $scope.fullHeight = '700px';
  // set default layout mode
	$rootScope.settings.layout.pageContentWhite = true;
  $rootScope.settings.layout.pageBodySolid = false;
  $rootScope.settings.layout.pageSidebarClosed = false;
  console.log(I18n.t('event.category.equipping'));
}]);
nlccmgmtapp.controller('eventAllCtrl', ['$scope', 'categoryFactory', '$uibModal', function($scope, categoryFactory, $uibModal){
  console.log('Event Controller');
  
  categoryFactory.getAllCategories().then(function(data){
    $scope.categories = data;
    console.log(data);
  });
    
  $scope.getDate = function(d){
    return new Date(d).toString();
  }
  $scope.event = event;
  
  $scope.deleteEvent = function(event, category){
    console.log("DeleteEvent");
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: 'mgmts/confirmModel.html',
      controller: 'modalDeleteEventCtrl',
      resolve: {
        event: function () {
          return event;
        }
      }
    });
    
    modalInstance.result.then(function (result) {
      console.log(result);
      if(result == 0) {
        console.log("result: " + result);
        var idx=0, idx1=0;
        for (idx1=0; idx1 < $scope.categories.length; idx1++){
          for(idx=0; idx < $scope.categories[idx1].events.length; idx++){
            if (event.id == $scope.categories[idx1].events[idx].id){
              $scope.categories[idx1].events.splice(idx, 1);
            }
          }
        }
        toastr.success('Remove event \'' + event.title + '\' successfully');
        return
      }
    });
  }
  
}]).controller('eventNewCtrl', ['$scope', 'categories', 'eventFactory', '$state', '$sce', 
function($scope, categories, eventFactory, $state, $sce){
  console.log('Event New Controller');
  $scope.function='new';
  var d = new Date();
  d.setHours(9);
  d.setMinutes(0);
  $scope.event = {}
  $scope.event.period = {
    min: 50
  }
  //$('#period-slider').ionRangeSlider();
  /*$scope.event.datetime = '';
  $scope.$watch('event.datetime', function(newValue, oldValue) {
    console.log('Datetime changed.');
  });*/
  $scope.event.datetime = moment(d).format('MM/DD/YYYY h:mm a');
  $scope.event.title = '';
  $scope.event.short_desc= '';
  $scope.event.desc = '';
  $scope.event.location = '';
  //$scope.$apply($scope.event.datetime);
  
  $scope.meta={};
  $scope.meta.categories = categories
  
  //$('.date-picker').datetimepicker();
  $scope.repeat={};
  $scope.repeat.valid_until = moment(d).format('MM/DD/YYYY');
  $scope.repeat.isSelected = false;
  $scope.repeat.onText = 'Yes';
  $scope.repeat.offText = 'No';
  $scope.repeat.isActive = true;
  $scope.repeat.size = 'normal';
  $scope.repeat.animate = true;
  $scope.repeat.radioOff = true;
  $scope.repeat.handleWidth = "auto";
  $scope.repeat.labelWidth = "auto";
  $scope.repeat.inverse = true;
  $scope.repeat.onColor="success"
  $scope.repeat.offColor="danger"
  
  $scope.meta.categories = categories;

  $scope.$watch('repeat.isSelected', function() {
    console.log('Selection changed.');
  });
  

  $scope.toggle = function() {
    $scope.isSelected = $scope.isSelected === true ? false : true;
  };

  $scope.setUndefined = function() {
    $scope.isSelected = undefined;
  };

  $scope.toggleActivation = function() {
    $scope.isActive = !$scope.isActive;
  }
  
  $scope.submit = function(func){
    //if ($scope.event.desc.length > 1024) {
    //  toastr.warning('Too long for the description: length: ' + $scope.event.desc.length + ', please revise it under 1024 characters');
    //  return;
    //}
    console.log(func);
    console.log("Submit");
    $scope.event.repeat = $scope.repeat;
    if(func == 'new'){
      eventFactory.createEvent($scope.event).then(function(data){
        //$scope.mvideos.push(data);
        //$scope.hideform();
        //console.log(data);
        toastr.success('Create event \'' + $scope.event.title + '\' successfully');
        $state.go('events-all');
      }).catch(function(data, status) {
        toastr.warning('Create event failed');
      });
    } else if(func == 'edit'){
      
    }
  }
}]).controller('eventEditCtrl', ['$scope', 'event', 'categories', 'eventFactory', '$state',
function($scope, event, categories, eventFactory, $state){
  console.log('Event Edit Controller');
  $scope.function = 'edit'
  $scope.meta={};
  $scope.meta.categories = categories;
  $scope.getDatetime = function(d){
    return new Date(d).toString();
  }
  $scope.event = event
  $scope.event.datetime = moment(event.datetime).format('MM/DD/YYYY h:mm a');
  $scope.event.desc = unescape($scope.event.desc)
  //console.log(unescape($scope.event.desc));
  //console.log(event);
  var cat = [];
  $scope.event.period = {
    min: event.event_period
  }
  
  $scope.event.categories.forEach(function(item, index){
    console.log('push: ' + index);
    cat.push(index+1);
  })
  $scope.event.categories = cat;
  $scope.repeat={};
  
  if($scope.event.repeat_metum.length==0){
    $scope.repeat.isSelected = false;
  }else{
    $scope.repeat.isSelected = true;
    $scope.repeat.valid_until =  moment($scope.event.repeat_metum.valid_until).format('MM/DD/YYYY');
  }
  
  $scope.repeat.onText = 'Yes';
  $scope.repeat.offText = 'No';
  $scope.repeat.isActive = true;
  $scope.repeat.size = 'normal';
  $scope.repeat.animate = true;
  $scope.repeat.radioOff = true;
  $scope.repeat.handleWidth = "auto";
  $scope.repeat.labelWidth = "auto";
  $scope.repeat.inverse = true;
  $scope.repeat.onColor="success"
  $scope.repeat.offColor="danger"
  
  $scope.meta.categories = categories;
  
  $scope.$watch('isSelected', function() {
    //console.log('Selection changed.');
  });


  $scope.setUndefined = function() {
    $scope.isSelected = undefined;
  };

  $scope.toggleActivation = function() {
    $scope.isActive = !$scope.isActive;
  }
  
  $scope.submit = function(func){
    console.log(func);
    $scope.event.repeat = $scope.repeat;
    if(func == 'new'){
      
    } else if(func == 'edit'){
      eventFactory.updateEvent($scope.event).then(function(data){
        //$scope.mvideos.push(data);
        //$scope.hideform();
        //console.log(data);
        toastr.success('Create event \'' + $scope.event.title + '\' successfully');
        $state.go('events-all');
      }).catch(function(data, status){
        toastr.warning('Create event failed');
      });
    }
  }
}]).controller('eventCtrl', ['$scope', 'event',
function($scope, event){
  $scope.event = event;
  $scope.event.desc = unescape(event.desc)
}]);

/* Setup Layout Part - Header */
nlccmgmtapp.controller('headerController', ['$scope', function($scope) {
  console.log("Header Controller")
  $scope.$on('$includeContentLoaded', function() {
    Layout.initHeader(); // init header
  });
}]);
nlccmgmtapp.controller('sidebarController', ['$scope', function($scope) {
  console.log("Siderbar Controller");
  $scope.$on('$includeContentLoaded', function() {
    Layout.initSidebar();
  });
}]);

nlccmgmtapp.controller('quicksidebarController', ['$scope', function($scope) {
  console.log("quicksidebarController Controller");
  $scope.$on('$includeContentLoaded', function() {
    setTimeout(function(){
      QuickSidebar.init(); // init quick sidebar        
    }, 2000)
  });
}]);

nlccmgmtapp.controller('mediaVideoCtrl', ['$scope', '$timeout', 'mvideoFactory', '$uibModal', 
function($scope, $timeout, mvideoFactory, $uibModal) {
  console.log("mediaVideoCtrl Controller");
  $scope.animationsEnabled = true;
  $scope.newvideo={};
  $scope.newvideo.title='';
  $scope.newvideo.date='';
  $scope.newvideo.path='';
  $scope.newvideo.desc='';
  $scope.getMonth = function(date) {
    var monthNames = [
      "Jan", "Feb", "Mar",
      "Apr", "May", "Jun", "Jul",
      "Aug", "Sep", "Oct",
      "Nov", "Dec"
    ];
    var d = new Date(date);
    //console.log('get month');
    return monthNames[d.getMonth()]
  }
  
  $scope.getDay = function(date) {
    var d = new Date(date);
    //console.log(date);
    return d.getDate()+1;
  }
  
  $scope.createMVideo = function(mvideo){
    console.log(mvideo)
    mvideoFactory.createMVideo(mvideo).then(function(data){
      $scope.mvideos.push(data);
      $scope.hideform();
      console.log("Success create a Media");
    });
  }
  
  $scope.deleteMVideo = function(mvideo){
    console.log("DeleteMVideo");
    var modalInstance = $uibModal.open({
      animation: $scope.animationsEnabled,
      templateUrl: 'myModalContent.html',
      controller: 'modalDeleteMvideoCtrl',
      resolve: {
        mvideo: function () {
          return mvideo;
        }
      }
    });
    
    modalInstance.result.then(function (result) {
      console.log(result);
      if(result == 0) {
        var idx = 0;
        for(idx=0; idx<$scope.mvideos.length; idx++){
          if (mvideo.id == $scope.mvideos[idx].id){
            $scope.mvideos.splice(idx, 1);
            return;
          }
        }
      }
    });
  
  }
  
  $scope.showform = function() {
    $('#newEventForm').slideDown(400);
  }
  
  $scope.hideform = function() {
    $('#newEventForm').slideUp(400);
  }
  
  $scope.$on('$viewContentLoaded', function() {
    console.log("view content loaded");
    mvideoFactory.getAllMvideos().then(function(data){
      $scope.mvideos = data;
      //console.log(data);
    });
    $timeout(function(){
     }, 0)
  });
}]);

nlccmgmtapp.controller('modalDeleteMvideoCtrl', ['$scope', '$uibModalInstance', 'mvideoFactory', 'mvideo', 
function ($scope, $uibModalInstance, mvideoFactory, mvideo) {

  $scope.ok = function () {
    console.log("delete {" + mvideo.id + "}");
    mvideoFactory.deleteMVideo(mvideo.id).then(function(data){
      console.log("Successfully delete the m-video");
    });
    $uibModalInstance.close(0);
  };

  $scope.cancel = function () {
    $uibModalInstance.dismiss('cancel');
  };
}]);

nlccmgmtapp.controller('modalDeleteEventCtrl', ['$scope', '$uibModalInstance', 'eventFactory', 'event', 
function ($scope, $uibModalInstance, eventFactory, event) {

  $scope.ok = function () {
    console.log("delete {" + event.id + "}");
    console.log(event);
    eventFactory.deleteEvent(event.id).then(function(data){
      console.log("Successfully delete the m-video");
    });
    $uibModalInstance.close(0);
  };

  $scope.cancel = function () {
    $uibModalInstance.dismiss('cancel');
  };
}]);

nlccmgmtapp.controller('libraryCtrl', ['$scope', 'libraries', function($scope, libraries){
  console.log('library Controller');
  $scope.libraries = libraries;
}]);
nlccmgmtapp.controller('FileUploadCtrl', ['$scope', 'FileUploader', function($scope, FileUploader){
  var uploader = $scope.uploader = new FileUploader(
  {
    headers : {
      'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
    },
    url: '/libraries',
    alias: 'library[attachment]'
  });
  // FILTERS
  uploader.filters.push(
  {
      name: 'customFilter',
      fn: function(item /*{File|FileLikeObject}*/ , options)
      {
          return this.queue.length < 10;
      }
  });
  // CALLBACKS
  uploader.onWhenAddingFileFailed = function(item /*{File|FileLikeObject}*/ , filter, options)
  {
      console.info('onWhenAddingFileFailed', item, filter, options);
  };
  uploader.onAfterAddingFile = function(fileItem)
  {
      console.info('onAfterAddingFile', fileItem);
  };
  uploader.onAfterAddingAll = function(addedFileItems)
  {
      console.info('onAfterAddingAll', addedFileItems);
  };
  uploader.onBeforeUploadItem = function(item)
  {
      console.info('onBeforeUploadItem', item);
  };
  uploader.onProgressItem = function(fileItem, progress)
  {
      console.info('onProgressItem', fileItem, progress);
  };
  uploader.onProgressAll = function(progress)
  {
      console.info('onProgressAll', progress);
  };
  uploader.onSuccessItem = function(fileItem, response, status, headers)
  {
      console.info('onSuccessItem', fileItem, response, status, headers);
  };
  uploader.onErrorItem = function(fileItem, response, status, headers)
  {
      console.info('onErrorItem', fileItem, response, status, headers);
  };
  uploader.onCancelItem = function(fileItem, response, status, headers)
  {
      console.info('onCancelItem', fileItem, response, status, headers);
  };
  uploader.onCompleteItem = function(fileItem, response, status, headers)
  {
      console.info('onCompleteItem', fileItem, response, status, headers);
  };
  uploader.onCompleteAll = function()
  {
      console.info('onCompleteAll');
  };
  console.info('uploader', uploader);
}]);